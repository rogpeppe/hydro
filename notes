Mon 17 Aug 17:47:41 BST 2020

create a worker that periodically scans for available reports and calls store.UpdateReports
with the reports that can be generated.
When the user clicks on a report, they download a CSV file containing the report.

somehow i wonder if we can take advantage of the meter energy storage by
pulling energy reading from the meter storage directly.
	logworker
		every so often it tries to pull the logs (don't go back further than a month)
		look in directory:
			list sample files we've already got there.
			go through the days of the month:
				if there's no sample that overlaps a specific day, then try to pull the data for that day.



Sun 16 Aug 08:42:06 BST 2020

We'd quite like to be able to combine arbitrary sample sets from the same meter
without worrying about whether they overlap or not.
Well, that wasn't too hard, was it?

Sat 15 Aug 13:25:27 BST 2020

remote monitor:

	in loop:
		poll meter. append result to file. one file for each uptime, holding readings for a maximum of some time (a day?)
		with name signifying the start time (use unix milliseconds? or format "2006-01-02T150405.000Z0700" to retain Windows compatibility)
	http server:
		GET /readings/...
			http.Dir on result directory
		GET /readings
			JSON listing of files in directory
		DELETE /readings/...
			remove all but the most recent file?
		GET /reading
			make call to meter to get latest reading and return it.


in controller:
	twice a day:
		gather new readings from meters:
			for all meters, list available readings files, get any files which started before 24h ago
			and store them locally, then delete them once stored. could also potentially upload
			the data to the cloud
		if a report is due (we're at least one day after the end of the month):
			if latest readings are available from all meters, produce report:
				for each time quantum (1 minute?)
					use linear interpolation between known points.
					we require at least one data point at either end of the report period.
					calculate chargeable power for that minute.
					add all minutes together within an hour and produce the hour-by-hour numbers as the final report.

latest reading is available if there's at least one sample point after the end of the report period.
start with the latest sample prior to the report period.


	type SampleReader struct{}

	func (r *SampleReader) ReadSample() (*ndmeter.Sample, error)


	func QuantizedUsage(r *SampleReader, start time.Time, quantum time.Duration) *UsageReader

	type UsageReader struct{...}

	func (r *PowerUsageReader) ReadUsage() (float64, error)

Thu 13 Aug 15:29:20 BST 2020

ntp-reading: absolute-time monotonic-timestamp
reading: active-power total-energy monotonic-timestamp

what do we do if we didn't manage to contact an NTP server for entire uptime of the machine?
- perhaps there's nothing we can do apart from discard those readings and replace them by
the estimated readings through the lifetime of the machine.

also, say we've got this sequence of readings:

	ntp-reading: t0
	reading: r0
	reading: r1
	reading: r2
	ntp-reading: t1
	reading: r3

what absolute values do we choose for the readings? If we just switch abruptly
when we get the second meter reading, we run the risk of swapped readings.

How about assuming that the clock is accurate enough and that we only require
a single NTP reading for the entire lifetime of the Pi?
We could periodically poll NTP and if the difference is too bad,
start another era.

An era has a sequential set of readings within a particular uptime.
It's associated with a single absolute time that provides the
absolute NTP-provided time for a given timestamp.

We could store the readings in a file named after the absolute time of the
first reading. If the time isn't known initially, then we don't provide the readings.
We don't need to because this isn't crucial for the moment-to-moment operation
of the system.

Tue  4 Aug 10:45:21 BST 2020

call:
	Aliday meter not working

	use existing raspberry pis


Sun 15 Apr 11:49:37 BST 2018

For recording samples, what do we do?
Say we have 30 samples in a minute. Do we record all the samples? (probably not,
as that's way overkill). Do we record one sample (the median? the mode? the max/min ?)
Do we record some stats about what happened, without any of the actual samples?
Problem with that is that we have some data but because we're interpolating, none
of the actual values sampled are recorded.

What about:

	we record all samples to a temporary space.
	then sporadically assess those samples and summarise them into a more permanent table

Or...

currently take total used, work out proportional to import
-

daylight savings adjustments
monotonic time
upload to google sheets (or provide CSV download)
hourly intervals

fleet of knives


Thu 28 Dec 10:35:26 GMT 2017

getting RTC board working. See:

[Wednesday, 8 February 2017] [19:06:01 GMT] <mup>	Bug #1663001 opened: rc.local not writable, but i2c addon board needs special treatment <Snappy:New> <https://launchpad.net/bugs/1663001>

Tue 14 Feb 07:35:36 GMT 2017

On Zyxel router, port forwarding config in /etc/nat_pvc0/vserver*

Mon 13 Feb 23:28:17 GMT 2017

To make a "local" connection to cabinet-router:

	ssh -p 222  '-oKexAlgorithms=+diffie-hellman-group1-sha1' -L 5900:192.168.1.254:80 pi@borla.ddns.net

then use Chrome Virtual Hosts app to rewrite localhost:5900 to 192.168.1.254

Tue  7 Feb 18:43:25 GMT 2017

To decompile a device overlay file:

overlays are in /boot/uboot/pi2-kernel_22.snap/dtbs/overlays.tgz

	dtc -I dtb -O dts i2c-rtc.dtbo

systemctl --global enable unit...

Sat  4 Feb 19:35:47 GMT 2017

build snap:

	remember to update version field if not using the store.

	cd snap
	snapcraft clean
	snapcraft build
	snapcraft snap

to install directly from .snap file:
	snap install --dangerous $snap.snap


enable ntp:

	timedatectl set-ntp true

systemd unit to sync time, in /etc/systemd/system/timesync.service

[Unit]
Wants=snap.hydroctl.hydroserver
Before=snap.hydroctl.hydroserver

[Service]
Type=oneshot
ExecStart=/bin/sh -c "echo pirt started > /tmp/pirtc.started"
ExecStart=/home/rogpeppe/pirtc -sys

[Install]
WantedBy=multi-user.target


To see logs for a systemd unit:
	journalctl -u $unitname
Note: "systemctl enable" doesn't seem to print warnings!

Mon Dec 14 16:47:26 GMT 2015

OK, so we want to actually get something going now!

User alters parameters, gets told when they change.


http://borla.ddns.net/


2015/10/13

questions:

colour theme? SASS?

accordion?

react vs bootstrap, foundation, ... ?

layout in general


unminify.com


How are we going to manage timeslots?

watcher:

func (w *Watcher) Next() bool
func (w *Watcher) Look() io.Closer
func (w *Watcher) Change() io.Closer


	for w.Next() {
		x := w.Look()
		x.Close()
	}


x.y.z
new x.y
del x.y

or...

PUT /Cohorts/<id>/ActiveSlots/<id>/title
PUT /Cohorts/<id>/ActiveSlots/<id>/relays
POST /Cohorts/<id>/ActiveSlots/new -> <id>
PUT /Cohorts/<id>/ActiveSlots/<id>/MaxPower


PUT /data/Cohorts/<id>/ActiveSlots/<index>/Title


# media query
@media only screen and (max-width: 620px) {
	#classname {
		font-size: ..
	}
}

<meta name="viewport" content="width=device-width, initial-scale=1.0">

https://github.com/juju/juju-gui/blob/pyramid-fork/jujugui/static/gui/src/app/components/string-config/string-config.js

babelify Makefile:

	SHELL = /bin/bash
	.DEFAULT_GOAL := all

	BABEL := node_modules/.bin/babel
	ESLINT := node_modules/.bin/eslint

	BUILD_DIR := build/
	RAW_JS_FILES := $(shell find app -type f -name '*.js')
	BUILT_RAW_JS_FILES := $(patsubst app/%, $(BUILD_DIR)%, $(RAW_JS_FILES))

	define colorecho
		@tput setaf 2
		@echo $(1)
		@tput sgr0
	endef

	$(BUILD_DIR):
		@echo -n "Generating build directory. "
		@mkdir -p $(BUILD_DIR)
		$(call colorecho,"Done.")

	$(BUILD_DIR)%.js: app/%.js
		@echo -n "Creating $^. "
		@mkdir -p $(@D)
		@$(BABEL) $^ -o $@ --source-maps
		$(call colorecho,"Done.")

	.PHONY: all
	all: $(BUILD_DIR) deps babelize

	.PHONY: deps
	deps:
		@echo "Installing dependencies."
		@npm install
		$(call colorecho,"Done installing dependencies.")

	.PHONY: babelize
	babelize: $(BUILD_DIR)
		@echo "Running source files through babeljs."
		@$(BABEL) app --source-maps --out-dir=$(BUILD_DIR)
		$(call colorecho,"Done babeljs processing.")

	.PHONY: clean
	clean:
		@echo -n "Removing built files. "
		@rm -rf $(BUILD_DIR)
		$(call colorecho,"Done.")

Mon 29 Aug 22:43:33 BST 2016

First actual deployment (on desktop machine).

